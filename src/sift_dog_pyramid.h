#ifndef SIFT_DOG_PYRAMID_H
#define SIFT_DOG_PYRAMID_H


#include <opencv2/opencv.hpp>


namespace sift {

class SsPyramid;

///=================================================================================================
/// <summary>
/// The Difference-of-Gaussian Pyramid contains multiple interval images per octave. The images are
/// calculated using a given scale space pyramid. The pyramid is not build at once but in multiple
/// steps. Therefore it is necessary to call step to proceed to the next interval. You can access
/// the previous and next interval images which allows access the -1st and the (n + 1)th interval of
/// an octave.
/// </summary>
///
/// <remarks> Jasper, 20.08.2012. </remarks>
///-------------------------------------------------------------------------------------------------
class DogPyramid {

public:

/******************************************************************************************************* 
 ****** 0. Constructors ********************************************************************************
 *******************************************************************************************************/

	///=================================================================================================
	/// <summary>
	/// Default constructor. Constructs an empty object which cannot be used.
	/// </summary>
	///-------------------------------------------------------------------------------------------------
	DogPyramid();

	///=================================================================================================
	/// <summary> Constructor. </summary>
	/// 
	/// <param name="ss">
	/// The Scale Space Pyramid used to build this Difference-of-Gaussian Pyramid.
	/// </param>
	///-------------------------------------------------------------------------------------------------
	DogPyramid(const SsPyramid &ss);
				
/******************************************************************************************************* 
 ****** I. Public Methods ******************************************************************************
 ****** I.a Getters ************************************************************************************
 *******************************************************************************************************/

	///=================================================================================================
	/// <summary> Query if this object is empty. </summary>
	///
	/// <returns> true if empty, false if not. </returns>
	///-------------------------------------------------------------------------------------------------
	bool isEmpty() const;

	///=================================================================================================
	/// <summary>
	/// Gets the previous interval image.
	/// </summary>
	///
	/// <returns> The previous interval image. </returns>
	///-------------------------------------------------------------------------------------------------
	const cv::Mat &getPrevious() const;

	///=================================================================================================
	/// <summary>
	/// Gets the current interval image.
	/// </summary>
	///
	/// <returns> The current interval image. </returns>
	///-------------------------------------------------------------------------------------------------
	const cv::Mat &getCurrent() const;

	///=================================================================================================
	/// <summary>
	/// Gets the next interval image.
	/// </summary>
	///
	/// <returns> The next interval image. </returns>
	///-------------------------------------------------------------------------------------------------
	const cv::Mat &getNext() const;
				
/******************************************************************************************************* 
 ****** I.b Use Case Methods ***************************************************************************
 *******************************************************************************************************/

	///=================================================================================================
	/// <summary> Starts a new pyramid. </summary>
	///
	/// <param name="ss"> The Scale Space Pyramid used to build this Difference-of-Gaussian Pyramid. </param>
	///-------------------------------------------------------------------------------------------------
	void start(const SsPyramid &ss);

	///=================================================================================================
	/// <summary> Clears this object to its blank/initial state. </summary>
	///-------------------------------------------------------------------------------------------------
	void clear();

	///=================================================================================================
	/// <summary>
	/// Calculates the next interval if the octave isn't fully build yet. Otherwise it builds the base
	/// of the next octave. Note that the scale space pyramid isn't called to step. Therefore it has to
	/// be called externally.
	/// </summary>
	///-------------------------------------------------------------------------------------------------
	void step();
	
private:

/******************************************************************************************************* 
 ****** II. Fields *************************************************************************************
 *******************************************************************************************************/

	///=================================================================================================
	/// <summary>
	/// The Scale Space Pyramid used to build this Difference-of-Gaussian Pyramid.
	/// </summary>
	///-------------------------------------------------------------------------------------------------
	const SsPyramid *ss;

	///=================================================================================================
	/// <summary>
	/// The previous interval image.
	/// </summary>
	///-------------------------------------------------------------------------------------------------
	cv::Mat prev;

	///=================================================================================================
	/// <summary>
	/// The current interval image.
	/// </summary>
	///-------------------------------------------------------------------------------------------------
	cv::Mat curr;

	///=================================================================================================
	/// <summary>
	/// The next interval image.
	/// </summary>
	///-------------------------------------------------------------------------------------------------
	cv::Mat next;

	///=================================================================================================
	/// <summary>
	/// Checks the given ss whether it is non-empty.
	/// </summary>
	///
	/// <param name="ss"> The Scale Space Pyramid used to build this Difference-of-Gaussian Pyramid. </param>
	///-------------------------------------------------------------------------------------------------
	void check(const SsPyramid &ss) const;

};


/******************************************************************************************************* 
 ****** Inline Definitions *****************************************************************************
 *******************************************************************************************************/
 
inline bool DogPyramid::isEmpty() const {
	return ss == nullptr;
}

inline const cv::Mat &DogPyramid::getNext() const {
	return next;
}

inline const cv::Mat &DogPyramid::getCurrent() const {
	return curr;
}

inline const cv::Mat &DogPyramid::getPrevious() const {
	return prev;
}

}


#endif // SIFT_DOG_PYRAMID_H